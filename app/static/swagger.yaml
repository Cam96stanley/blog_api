swagger: "2.0"
info:
  title: Blog API
  description: >
    This is the backend to a blog app that allows users to register, create blogs, comment and like blogs...
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /users/login:
    post:
      tags:
        - User
      summary: Login a user
      description: >
        Endpoint to login a user, all fields are required. Takes in an email and password and returns a jwt with users id, email, username, and name.
      parameters:
        - in: body
          name: user
          description: User login data
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/LoginResponse"

        400:
          description: Missing required field
          schema:
            type: object
            example:
              error: "Email and password are required"

        401:
          description: Invalid email or password
          schema:
            type: object
            example:
              error: "Invalid email or password"

        500:
          description: Internal server error
          schema:
            type: object
            example:
              error: "Internal server error"
              details: "error details here..."

  /users:
    post:
      tags:
        - User
      summary: Register a user
      description: >
        Endpoint accepts 'name', 'username', 'email', and 'password', all are required. Username must be between 3-150 characters. Email must be in email format (i.e 'test@test.com'). Name, username, email, and password are all strings.
      parameters:
        - in: body
          name: user data
          description: User registration data
          required: true
          schema:
            $ref: "#/definitions/UserRegistration"
      responses:
        201:
          description: User created successfully
          schema:
            $ref: "#/definitions/UserResponse"

        400:
          description: Validation/Integrity error
          schema:
            type: object
            example:
              error: "Not a valid email"

        409:
          description: Email already registered
          schema:
            type: object
            example:
              error: "Email already registered"

        500:
          description: Internal server error
          schema:
            type: object
            example:
              error: "Internal server error"
              details: "error details here..."

  /users/me:
    patch:
      tags:
        - User
      summary: Update Currently logged in user
      description: >
        Authenticated endpoint, user must be logged in with a valid JWT. To update a user, only enter the data that needs to be changed (this is a patch request not a put request). ***Do NOT use this route to update password, please use /users/updatePassword.***
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: user data
          description: update user data
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
                example: "jdoe2020"
              email:
                type: string
                format: email
                example: "jdoe2020@example.com"
      responses:
        200:
          description: Successfully updated user
          schema:
            $ref: "#/definitions/UpdateUserResponse"

        400:
          description: >
            Validation error (i.e you tried update your password or entered an invalid request)
          schema:
            type: object
            example:
              error: "Do not use this route to update password. Use /users/changePassword"

        401:
          description: >
            Authentication failed. Possible reasons include:
              - Missing token
              - Invalid token
              - Expired token
          schema:
            type: object
            example:
              error: "Token is missing"

        500:
          description: Internal server error
          schema:
            type: object
            example:
              error: "Internal server error"
              details: "error details here..."

  /blogs:
    post:
      tags:
        - Blog
      summary: Create a blog
      description: >
        This is an authenticated route, only title and body are required. Other fields are not to be updated directly.
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: blog data
          description: Data to create a new blog entry
          required: true
          schema:
            $ref: "#/definitions/CreateBlog"
      responses:
        201:
          description: Blog created successfully
          schema:
            $ref: "#/definitions/CreateBlogResponse"

        400:
          description: Validation / Integrity error (i.e you entered invalid data as a request)
          schema:
            type: object
            example:
              error: "validation error here..."

        401:
          description: >
            Authentication failed. Possible reasons include:
              - Missing token
              - Invalid token
              - Expired token
          schema:
            type: object
            example:
              error: "Token is missing"

        404:
          description: No user found (i.e you deleted your account and tried creating a blog post)
          schema:
            type: object
            example:
              message: "No user found"

        500:
          description: Internal server error
          schema:
            type: object
            example:
              error: "Internal server error"
              details: "error details here..."

    get:
      tags:
        - Blog
      summary: Get all blogs
      description: Endpoint to retrieve a list of all blogs in the database.
      responses:
        200:
          description: A list of blogs
          schema:
            type: array
            items:
              $ref: "#/definitions/blogs"
          examples:
            application/json:
              - id: 1
                author_id: 1
                title: "Test Blog"
                body: "blah blah blah"
                created_at: "2025-07-15T08:01:30"
                is_archived: false
                updated_at: null
              - id: 2
                author_id: 1
                title: "Test Blog Two"
                body: "blah blah blah"
                created_at: "2025-07-17T00:26:08"
                is_archived: false
                updated_at: null

        500:
          description: Internal server error
          schema:
            type: object
            example:
              error: "Internal server error"
              details: "error details here..."

  /blogs/{blog_id}:
    get:
      tags:
        - Blog
      summary: Get a blog by id
      description: Takes on parameter (blog_id) and returns a single blog.
      parameters:
        - in: path
          name: blog_id
          required: true
          type: integer
          description: ID of the blog to retrieve
      responses:
        200:
          description: blog retrieved successfully
          schema:
            $ref: "#/definitions/CreateBlogResponse"

        404:
          description: Blog not found
          schema:
            type: object
            example:
              error: "No blog found"

        500:
          description: Internal server error
          schema:
            type: object
            example:
              error: "Internal server error"
              details: "error details here..."

    patch:
      tags:
        - Blog
      summary: Update blog by id
      description: >
        Authenticated route based on the author of the blog. ***Only update title, body, or both through this route*** (this is a patch request not a put request). All other properties should not be touched.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: blog_id
          description: ID of blog to update
          required: true
          type: integer
        - in: body
          name: blog data
          description: updated blog data
          required: true
          schema:
            $ref: "#/definitions/CreateBlog"
      responses:
        200:
          description: Blog updated successfully
          schema:
            $ref: "#/definitions/CreateBlogResponse"

        400:
          description: Validation / Integrity error
          schema:
            type: object
            example:
              error: "Error here..."

        403:
          description: Forbidden (i.e you are not the author of this blog)
          schema:
            type: object
            example:
              error: "Forbidden: You cannot edit this blog"

        404:
          description: Blog not found
          schema:
            type: object
            example:
              error: "No blog found"

        500:
          description: Internal server error
          schema:
            type: object
            example:
              error: "Internal server error"
              details: "error details here..."

  /blogs/{blog_id}/archive:
    patch:
      tags:
        - Blog
      summary: Toggle archive status
      description: >
        Authenticated route, you must be the author of the blog to archive/unarchive the blog. Endpoint takes the blogs id that you want to toggle the archive status on. No parameters in the body, just send and it will toggle is_archived to true or false.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: blog_id
          description: ID of blog toggle archive status
          required: true
          type: integer
      responses:
        200:
          description: Blog archived/unarchived successfully
          schema:
            $ref: "#/definitions/BlogArchiveResponse"

        403:
          description: Forbidden (i.e you are not the author of this blog)
          schema:
            type: object
            example:
              error: "Forbidden: You cannot edit this blog"

        404:
          description: Blog not found
          schema:
            type: object
            example:
              error: "No blog found"

        500:
          description: Internal server error
          schema:
            type: object
            example:
              error: "Internal server error"
              details: "error details here..."

  /blogs/{blog_id}/comments:
    post:
      tags:
        - Comment
      summary: Create a comment for a blog
      description: >
        Authenticated route, a user must be logged in to comment on blogs. Takes one parameter in path, the id of the blog that is being commented on, and a parameter in the body, the content of the comment. Do not send any other data in the request.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: blog_id
          required: true
          description: ID of the blog being commented on
        - in: body
          name: comment data
          required: true
          schema:
            type: object
            example:
              content: "Blah blah blah"
      responses:
        200:
          description: Comment created successfully
          schema:
            $ref: "#/definitions/CommentResponse"

    get:
      tags:
        - Comment
      summary: Get all comments for a blog
      description: Endpoint to retrieve all the comments for the blog_id passed into the path
      parameters:
        - in: path
          name: blog_id
          required: true
          description: ID of the blog you want to retrieve comments for
          type: integer
      responses:
        200:
          description: Blog archived/unarchived successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/CommentResponse"
          examples:
            application/json:
              - id: 1
                content: "blah blah blah"
                post_id: 1
                created_at: "2025-07-17T01:56:31"
                updated_at: "2025-07-15T08:01:30"
                is_archived: false
                is_updated: false
                user:
                  id: 1
                  name: "John Doe"
                  username: "jdoe2020"
              - id: 2
                content: "blah blah blah"
                post_id: 1
                created_at: "2025-07-17T01:56:31"
                updated_at: "2025-07-15T08:01:30"
                is_archived: false
                is_updated: false
                user:
                  id: 2
                  name: "Jane Doe"
                  username: "jdoe2121"

definitions:
  UserRegistration:
    type: object
    required:
      - name
      - username
      - email
      - password
    properties:
      name:
        type: strings
        example: "John Doe"
      username:
        type: string
        example: "jdoe20"
      email:
        type: string
        format: email
        example: "jdoe@example.com"
      password:
        type: string
        format: password
        example: "test123"

  UserResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: "John Doe"
      username:
        type: string
        example: "jdoe20"
      email:
        type: string
        example: "jdoe@example.com"
      created_at:
        type: string
        format: date-time
        example: "2025-07-15T08:01:20"

  UserLogin:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
        example: "jdoe@example.com"
      password:
        type: string
        format: password
        example: "test123"

  LoginResponse:
    type: object
    properties:
      status:
        type: string
        example: "success"
      message:
        type: string
        example: "Login successful"
      token:
        type: string
        example: "al;knv2knv[poikvnvknawnv..."
      user:
        type: object
        properties:
          id:
            type: string
            example: 1
          name:
            type: string
            example: "John Doe"
          username:
            type: string
            example: "jdoe20"

  UpdateUserResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: "John Doe"
      username:
        type: string
        example: "jdoe2020"
      email:
        type: string
        format: email
        example: "jdoe2020@example.com"
      created_at:
        type: string
        format: date-time
        example: "2025-07-15T08:01:20"

  CreateBlog:
    type: object
    required:
      - title
      - body
    properties:
      title:
        type: string
        example: "Example Blog"
      body:
        type: string
        example: "Blah blah blah"

  CreateBlogResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      author_id:
        type: integer
        example: 1
      title:
        type: string
        example: "Example Blog"
      body:
        type: string
        example: "Blah blah blah"
      created_at:
        type: string
        format: date-time
        example: "2025-07-15T08:01:30"
      updated_at:
        type: string
        format: date-time
        nullable: true
        example: null
      is_archived:
        type: boolean
        example: false

  BlogArchiveResponse:
    type: object
    properties:
      blog:
        type: object
        properties:
          id:
            type: integer
            example: 1
          title:
            type: string
            example: "Example Blog"
          body:
            type: string
            example: "Blah blah blah"
          is_archived:
            type: boolean
            example: true
          created_at:
            type: string
            format: date-time
            example: "2025-07-17T01:24:59"
          updated_at:
            type: string
            format: date-time
            nullable: true
            example: null
          author:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: "John Doe"
              username:
                type: string
                example: "Jdoe2020"

  CommentResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      content:
        type: string
        example: "Blah blah blah"
      post_id:
        type: integer
        example: 1
      is_archived:
        type: boolean
        example: false
      created_at:
        type: string
        format: date-time
        example: "2025-07-17T01:49:27"
      updated_at:
        type: string
        format: date-time
        example: "2025-07-17T01:49:27"
      is_updated:
        type: boolean
        example: false
      user:
        type: object
        properties:
          id:
            type: integer
            example: 1
          name:
            type: string
            example: "Jane Doe"
          username:
            type: string
            example: "jdoe2121"
